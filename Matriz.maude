fmod MATRIZ is
  ***protecting LIST .
  sorts Matriz LIST{NAT} .
  subsort LIST{NAT} < Matriz .

  op empty : -> Matriz [ctor] .
  op _||_ : LIS LIST{NAT} -> Matriz [ctor assoc id: empty] .
  op saida : Matriz -> BOOL [ctor].

  vars M M' : Matriz .
  var L L' :  LIST{NAT} .

  ---base

  eq saida(M || L 3 || M') = true .
  eq saida(M || 3 L || M') = true .
  eq saida(L 3 L'|| M) = true .
  eq saida(M || L 3 L') = true .

  --- recursivo

  --- esquerda direita
  eq saida(M || L 0 3 0 L' || M') =
    saida(M||L 3 2 0 L'||M) or
    saida(M||L 0 2 3 L'||M) or
    saida(M||L 2 3 2 L'||M) .
  ---esquerda
  eq saida(M || L 0 3 1 L' || M') =
    saida(M||L 3 2 1 L'||M) or
    saida(M||L 2 3 1 L'||M) .

  ---
  eq saida(M ||L2 0 L2'||L 3 L'||L3 0 L3'||M') =
          if length(L2)==length(L) and length(L2')==length(L')
                   then saida(M ||L2 3 L2'||L 2 L'||L3 0 L3'||M') or
                        saida(M ||L2 2 L2'||L 3 L'||L3 0 L3'||M')
          else
                   if length(L3)==length(L) and length(L3')==length(L')
                        then saida(M ||L2 0 L2'||L 2 L'||L3 3 L3'||M')
                   else false if
          if .

  eq saida(M ||L2 3 L2'||L 0 L'||M') =
          if length(L2)==length(L) and length(L2')==length(L')
                   then saida(M ||L2 2 L2'||L 3 L'||M')
          else  false if .
  eq saida(M ||L2 0 L2'||L 3 L'||M') =
          if length(L2)==length(L) and length(L2')==length(L')
                   then saida(M ||L2 3 L2'||L 2 L'||M')
          else  false if .
  ---outro caso
  eq saida(M) = false [owise] .
endfm
